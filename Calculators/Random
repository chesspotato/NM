import React, { useState } from "react";
import { motion } from "framer-motion";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Shuffle, Dice6 } from "lucide-react";
import { Calculation } from "@/entities/Calculation";

export default function RandomCalculator() {
  const [minValue, setMinValue] = useState("");
  const [maxValue, setMaxValue] = useState("");
  const [result, setResult] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);

  const generateRandom = async () => {
    setIsGenerating(true);
    
    try {
      if (!minValue || !maxValue) {
        alert("Please enter both minimum and maximum values");
        setIsGenerating(false);
        return;
      }

      const min = parseInt(minValue);
      const max = parseInt(maxValue);

      if (min >= max) {
        alert("Minimum must be less than maximum");
        setIsGenerating(false);
        return;
      }

      // Add a small delay for effect
      await new Promise(resolve => setTimeout(resolve, 500));

      const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;

      setResult({
        number: randomNumber,
        min,
        max
      });

      // Save to history
      await Calculation.create({
        calculator_type: "random",
        input_data: { minValue: min, maxValue: max },
        result: `Random number: ${randomNumber} (between ${min} and ${max})`,
        calculation_date: new Date().toISOString()
      });

    } catch (error) {
      console.error("Generation error:", error);
      alert("Invalid numbers entered");
    }
    
    setIsGenerating(false);
  };

  const reset = () => {
    setMinValue("");
    setMaxValue("");
    setResult(null);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-6"
    >
      <Card className="border-0 bg-white/80 backdrop-blur-sm shadow-2xl">
        <CardHeader className="text-center pb-6">
          <div className="w-16 h-16 bg-gradient-to-r from-gray-500 to-slate-600 rounded-2xl flex items-center justify-center mx-auto mb-4">
            <Dice6 className="w-8 h-8 text-white" />
          </div>
          <CardTitle className="text-2xl font-bold text-slate-900">
            Random Number Generator
          </CardTitle>
          <p className="text-slate-600">Generate a random number within your range</p>
        </CardHeader>
        
        <CardContent className="space-y-6">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="min">Minimum value</Label>
              <Input
                id="min"
                type="number"
                placeholder="e.g. 1"
                value={minValue}
                onChange={(e) => setMinValue(e.target.value)}
                className="text-lg"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="max">Maximum value</Label>
              <Input
                id="max"
                type="number"
                placeholder="e.g. 100"
                value={maxValue}
                onChange={(e) => setMaxValue(e.target.value)}
                className="text-lg"
              />
            </div>
          </div>

          <div className="flex gap-3">
            <Button 
              onClick={generateRandom} 
              disabled={isGenerating}
              className="flex-1 bg-gradient-to-r from-gray-600 to-slate-600 hover:from-gray-700 hover:to-slate-700"
            >
              {isGenerating ? (
                <>
                  <Shuffle className="w-4 h-4 mr-2 animate-spin" />
                  Generating...
                </>
              ) : (
 