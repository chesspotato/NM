import React, { useState } from "react";
import { motion } from "framer-motion";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Calendar, Skull } from "lucide-react";
import { Calculation } from "@/entities/Calculation";

export default function Friday13Calculator() {
  const [year, setYear] = useState("");
  const [month, setMonth] = useState("");
  const [day, setDay] = useState("");
  const [result, setResult] = useState(null);
  const [isCalculating, setIsCalculating] = useState(false);

  const calculateFriday13s = async () => {
    setIsCalculating(true);
    
    try {
      if (!year || !month || !day) {
        alert("Please enter your complete birth date");
        setIsCalculating(false);
        return;
      }

      const birthYear = parseInt(year);
      const birthMonth = parseInt(month);
      const birthDay = parseInt(day);

      if (birthYear < 1900 || birthYear > new Date().getFullYear()) {
        alert("Please enter a valid birth year");
        setIsCalculating(false);
        return;
      }

      if (birthMonth < 1 || birthMonth > 12) {
        alert("Please enter a valid month (1-12)");
        setIsCalculating(false);
        return;
      }

      if (birthDay < 1 || birthDay > 31) {
        alert("Please enter a valid day (1-31)");
        setIsCalculating(false);
        return;
      }

      const startDate = new Date(birthYear, birthMonth - 1, birthDay);
      const endDate = new Date();
      
      let friday13Count = 0;
      let checkDate = new Date(birthYear, birthMonth - 1, 13);

      // Loop through each month from birth date to now
      while (checkDate <= endDate) {
        if (checkDate.getDay() === 5) { // 5 = Friday
          friday13Count++;
        }
        
        // Move to next month
        if (checkDate.getMonth() === 11) {
          checkDate = new Date(checkDate.getFullYear() + 1, 0, 13);
        } else {
          checkDate = new Date(checkDate.getFullYear(), checkDate.getMonth() + 1, 13);
        }
      }

      setResult(friday13Count);

      // Save to history
      await Calculation.create({
        calculator_type: "friday13",
        input_data: { year: birthYear, month: birthMonth, day: birthDay },
        result: `You've lived through ${friday13Count} Friday the 13ths`,
        calculation_date: new Date().toISOString()
      });

    } catch (error) {
      console.error("Calculation error:", error);
      alert("Invalid date entered");
    }
    
    setIsCalculating(false);
  };

  const reset = () => {
    setYear("");
    setMonth("");
    setDay("");
    setResult(null);
  };

  const getSurvivalMessage = (count) => {
    if (count === 0) return "üçÄ You haven't experienced any Friday the 13ths yet!";
    if (count === 1) return "üéØ You've survived your first Friday the 13th!";
    if (count <= 5) return "üí™ You're a Friday the 13th survivor!";
    if (count <= 10) return "üî• You're a seasoned Friday the 13th veteran!";
    return "üëë You're a legendary Friday the 13th survivor!";
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-6"
    >
      <Card className="border-0 bg-white/80 backdrop-blur-sm shadow-2xl">
        <CardHeader className="text-center pb-6">
          <div className="w-16 h-16 bg-gradient-to-r from-orange-500 to-red-500 rounded-2xl flex items-center justify-center mx-auto mb-4">
            <Skull className="w-8 h-8 text-white" />
          </div>
          <CardTitle className="text-2xl font-bold text-slate-900">
            Friday the 13th Counter
          </CardTitle>
          <p className="text-slate-600">How many have you survived?</p>
        </CardHeader>
        
        <CardContent className="space-y-6">
          <div className="grid grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="year">Birth Year</Label>
 