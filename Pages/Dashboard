
import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { User } from "@/entities/User";
import { 
  Plus, Minus, X, Divide, Sparkles, Calendar, 
  Mountain, Target, Heart, Shuffle, MessageCircleHeart, 
  Coins, Lock, KeyRound
} from "lucide-react";
import { Card, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert"; // AlertTitle is not used in the outline for the alert message
import { Skeleton } from "@/components/ui/skeleton";
import { CardContent } from "@/components/ui/card"; // CardContent is used in the outline for unlocker

const calculatorCategories = [
  {
    id: "basic",
    title: "Basic Math",
    description: "Standard calculator for all your math needs",
    icon: Plus,
    color: "from-blue-500 to-blue-600",
    calculators: ["basic"]
  },
  {
    id: "fun",
    title: "Fun Calculators",
    description: "Aura score, birthday stats & more",
    icon: Sparkles,
    color: "from-purple-500 to-pink-500",
    calculators: ["aura", "birth", "friday13", "zodiac"]
  },
  {
    id: "life",
    title: "Life Calculators",
    description: "Countdowns, heartbeats & compatibility",
    icon: Heart,
    color: "from-red-500 to-rose-500",
    calculators: ["target", "heart", "love", "school"]
  },
  {
    id: "special",
    title: "Special Tools",
    description: "Mount Everest, random numbers & gold prices",
    icon: Mountain,
    color: "from-green-500 to-emerald-500",
    calculators: ["mounteverest", "random", "gold"]
  }
];

const unlockCodes = {
  "LOVE": "love",
  "AURA": "aura", 
  "BIRTH": "birth",
  "FRIDAY13": "friday13",
  "MOUNTEVEREST": "mounteverest",
  "TARGET": "target",
  "HEART": "heart",
  "RANDOM": "random",
  "GOLD": "gold",
  "ZODIAC": "zodiac",
  "SCHOOL": "school"
};

const defaultUnlocked = ["basic"];

export default function Dashboard() {
  const [unlockedCalculators, setUnlockedCalculators] = useState(defaultUnlocked);
  const [isLoading, setIsLoading] = useState(true);
  const [unlockCode, setUnlockCode] = useState("");
  const [unlockMessage, setUnlockMessage] = useState({ type: "", text: "" });

  useEffect(() => {
    const fetchUserUnlocks = async () => {
      try {
        const currentUser = await User.me();
        const userUnlocks = currentUser.unlocked_calculators || [];
        setUnlockedCalculators([...new Set([...defaultUnlocked, ...userUnlocks])]); // Use Set to avoid duplicates
      } catch (error) {
        // console.info("User not logged in or failed to fetch user data, using default unlocks. Error:", error);
      }
      setIsLoading(false);
    };
    fetchUserUnlocks();
  }, []);

  const handleUnlock = async () => {
    const code = unlockCode.toUpperCase();
    const calculatorId = unlockCodes[code];

    if (calculatorId) {
      if (unlockedCalculators.includes(calculatorId)) {
        setUnlockMessage({ type: "info", text: "You've already unlocked this calculator!" });
      } else {
        const newUnlockedList = [...unlockedCalculators, calculatorId];
        const userUnlocksToSave = newUnlockedList.filter(id => !defaultUnlocked.includes(id));
        
        try {
          // Assuming User.updateMyUserData will merge or replace, sending only non-default unlocks
          await User.updateMyUserData({ unlocked_calculators: userUnlocksToSave });
          setUnlockedCalculators(newUnlockedList);
          setUnlockMessage({ type: "success", text: `Congratulations! You've unlocked the ${calculatorId} calculator!` });
        } catch(error) {
           setUnlockMessage({ type: "error", text: "Please log in to save your unlocked calculators." });
        }
      }
    } else {
      setUnlockMessage({ type: "error", text: "Invalid code. Please try again." });
    }
    setUnlockCode("");
  };
  
  const isUnlocked = (calcId) => unlockedCalculators.includes(calcId);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Hero Section */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <div className="inline-flex items-center gap-2 bg-gradient-to-r from-blue-100 to-purple-100 px-4 py-2 rounded-full mb-4">
            <Sparkles className="w-5 h-5 text-blue-600" />
            <span className="text-sm font-medium text-blue-800">Twisted Calculator</span>
          </div>
          <h1 className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-slate-900 via-blue-900 to-purple-900 bg-clip-text text-transparent mb-4">
            Unlock Your Calculations
          </h1>
          <p className="text-xl text-slate-600 max-w-2xl mx-auto">
            A unique calculator with hidden features. Enter secret codes to reveal them all.
          </p>
        </motion.div>

        {/* Unlocker */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="max-w-lg mx-auto mb-12"
        >
          <Card className="border-0 bg-white/80 backdrop-blur-sm shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><KeyRound className="w-5 h-5 text-purple-600"/> Enter a Secret Code</CardTitle>
            </CardHeader>
            <CardContent className="flex gap-3">
              <Input 
                placeholder="Enter secret code..." 
                className="text-lg"
                value={unlockCode}
                onChange={(e) => setUnlockCode(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleUnlock()}
              />
              <Button onClick={handleUnlock} className="bg-gradient-to-r from-blue-600 to-purple-600">Unlock</Button>
            </CardContent>
          </Card>
          {unlockMessage.text && (
            <Alert className={`mt-4 ${unlockMessage.type === 'error' ? 'border-red-500 bg-red-50 text-red-700' : 
                                     unlockMessage.type === 'info' ? 'border-blue-500 bg-blue-50 text-blue-700' :
                                     'border-green-500 bg-green-50 text-green-700'}`}>
              <AlertDescription>{unlockMessage.text}</AlertDescription>
            </Alert>
          )}
        </motion.div>
        
        {/* Calculator Categories */}
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
          {isLoading ? Array(4).fill(0).map((_, i) => <Skeleton key={i} className="h-48 w-full" />) :
          calculatorCategories.map((category, index) => {
            const isCategoryPartiallyUnlocked = category.calculators.some(id => isUnlocked(id));
            const isFullyUnlocked = category.calculators.every(id => isUnlocked(id));
            const url = isCategoryPartiallyUnlocked ? (category.id === 'basic' ? createPageUrl(`Calculator?calc=basic`) : createPageUrl(`Calculator?type=${category.id}`)) : '#';

            return(
            <motion.div
              key={category.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 + index * 0.1 }}
            >
              <Link to={url} className={!isCategoryPartiallyUnlocked ? 'pointer-events-none' : ''}>
                <Card className={`group hover:shadow-2xl transition-all duration-500 border-0 bg-white/80 backdrop-blur-sm hover:-translate-y-2 cursor-pointer overflow-hidden ${!isCategoryPartiallyUnlocked ? 'grayscale opacity-60' : ''}`}>
                  <div className={`h-2 bg-gradient-to-r ${category.color} ${!isCategoryPartiallyUnlocked ? 'bg-gray-400' : ''}`} />
                  <CardHeader className="p-6">
                    <div className={`w-14 h-14 bg-gradient-to-r ${category.color} rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300 relative`}>
                      <category.icon className="w-7 h-7 text-white" />
                      {!isFullyUnlocked && <div className="absolute -top-1 -right-1 bg-amber-400 p-1 rounded-full"><Lock className="w-3 h-3 text-white"/></div>}
                    </div>
                    <CardTitle className="text-xl font-bold text-slate-900 group-hover:text-blue-700 transition-colors">
                      {category.title}
                    </CardTitle>
                    <CardDescription className="text-slate-600 leading-relaxed">
                      {category.description}
                    </CardDescription>
                  </CardHeader>
                </Card>
              </Link>
            </motion.div>
          )})}
        </div>
      </div>
    </div>
  );
}
