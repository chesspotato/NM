import React, { useState } from "react";
import { motion } from "framer-motion";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { GraduationCap, BookOpen } from "lucide-react";
import { Calculation } from "@/entities/Calculation";

export default function SchoolCalculator() {
  const [years, setYears] = useState("");
  const [result, setResult] = useState(null);
  const [isCalculating, setIsCalculating] = useState(false);

  const calculateSchoolTime = async () => {
    setIsCalculating(true);
    
    try {
      if (!years) {
        alert("Please enter the number of years");
        setIsCalculating(false);
        return;
      }

      const yearsNum = parseInt(years);
      
      if (yearsNum < 0) {
        alert("Years can't be negative");
        setIsCalculating(false);
        return;
      }

      // Assumptions from the original code
      const daysPerYear = 180;
      const hoursPerDay = 6;
      const minutesPerDay = hoursPerDay * 60;

      const totalMinutes = yearsNum * daysPerYear * minutesPerDay;
      const totalHours = Math.floor(totalMinutes / 60);
      const totalDays = yearsNum * daysPerYear;

      setResult({
        years: yearsNum,
        totalMinutes: totalMinutes,
        totalHours: totalHours,
        totalDays: totalDays
      });

      // Save to history
      await Calculation.create({
        calculator_type: "school",
        input_data: { years: yearsNum },
        result: `You've spent approximately ${totalMinutes.toLocaleString()} minutes in school so far`,
        calculation_date: new Date().toISOString()
      });

    } catch (error) {
      console.error("Calculation error:", error);
      alert("Please enter a valid number");
    }
    
    setIsCalculating(false);
  };

  const reset = () => {
    setYears("");
    setResult(null);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-6"
    >
      <Card className="border-0 bg-white/80 backdrop-blur-sm shadow-2xl">
        <CardHeader className="text-center pb-6">
          <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-2xl flex items-center justify-center mx-auto mb-4">
            <GraduationCap className="w-8 h-8 text-white" />
          </div>
          <CardTitle className="text-2xl font-bold text-slate-900">
            School Time Calculator
          </CardTitle>
          <p className="text-slate-600">How much time have you spent in school? ðŸ“š</p>
        </CardHeader>
        
        <CardContent className="space-y-6">
          <div className="p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-200">
            <h3 className="font-semibold text-blue-800 mb-2">Assumptions:</h3>
            <ul className="text-sm text-blue-700 space-y-1">
              <li>â€¢ 180 school days per year</li>
              <li>â€¢ 6 hours per school day</li>
              <li>â€¢ 360 minutes per school day</li>
            </ul>
          </div>

          <div className="space-y-2">
            <Label htmlFor="years">How many full years have you been in school?</Label>
            <Input
              id="years"
              type="number"
              placeholder="e.g. 7"
              min="0"
              value={years}
              onChange={(e) => setYears(e.target.value)}
              className="text-lg"
            />
          </div>

          <div className="flex gap-3">
            <Button 
              onClick={calculateSchoolTime} 
              disabled={isCalculating}
              className="flex-1 bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700"
            >
              {isCalculating ? (
                <>
                  <BookOpen className="w-4 h-4 mr-2 animate-spin" />
                  Calculating...
                </>
              ) : (
                <>
 