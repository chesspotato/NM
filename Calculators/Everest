import React, { useState } from "react";
import { motion } from "framer-motion";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Mountain, Ruler } from "lucide-react";
import { Calculation } from "@/entities/Calculation";

export default function EverestCalculator() {
  const [height, setHeight] = useState("");
  const [unit, setUnit] = useState("");
  const [result, setResult] = useState(null);
  const [isCalculating, setIsCalculating] = useState(false);

  const calculateEverest = async () => {
    setIsCalculating(true);
    
    try {
      if (!height || !unit) {
        alert("Please enter your height and select a unit");
        setIsCalculating(false);
        return;
      }

      const heightValue = parseFloat(height);
      if (heightValue <= 0) {
        alert("Please enter a valid height");
        setIsCalculating(false);
        return;
      }

      let everestHeight;
      let heightInSameUnit;

      if (unit === "feet") {
        everestHeight = 29031.7; // Mount Everest in feet
        heightInSameUnit = heightValue;
      } else if (unit === "cm") {
        everestHeight = 884886; // Mount Everest in cm
        heightInSameUnit = heightValue;
      }

      const numPeople = everestHeight / heightInSameUnit;

      setResult({
        numPeople: numPeople,
        unit: unit,
        yourHeight: heightValue,
        everestHeight: everestHeight
      });

      // Save to history
      await Calculation.create({
        calculator_type: "mounteverest",
        input_data: { height: heightValue, unit },
        result: `It would take about ${numPeople.toFixed(2)} of you stacked to reach Mount Everest`,
        calculation_date: new Date().toISOString()
      });

    } catch (error) {
      console.error("Calculation error:", error);
      alert("Invalid height entered");
    }
    
    setIsCalculating(false);
  };

  const reset = () => {
    setHeight("");
    setUnit("");
    setResult(null);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-6"
    >
      <Card className="border-0 bg-white/80 backdrop-blur-sm shadow-2xl">
        <CardHeader className="text-center pb-6">
          <div className="w-16 h-16 bg-gradient-to-r from-emerald-500 to-green-500 rounded-2xl flex items-center justify-center mx-auto mb-4">
            <Mountain className="w-8 h-8 text-white" />
          </div>
          <CardTitle className="text-2xl font-bold text-slate-900">
            Mount Everest Comparison
          </CardTitle>
          <p className="text-slate-600">How many of you to reach the top? üèîÔ∏è</p>
        </CardHeader>
        
        <CardContent className="space-y-6">
          <div className="space-y-2">
            <Label>Height measurement unit</Label>
            <Select value={unit} onValueChange={setUnit}>
              <SelectTrigger>
                <SelectValue placeholder="Choose feet or centimeters" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="feet">Feet</SelectItem>
                <SelectItem value="cm">Centimeters</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="height">
              Enter your height in {unit || "selected unit"}
            </Label>
            <Input
              id="height"
              type="number"
              step="0.1"
              placeholder={unit === "feet" ? "e.g. 5.8" : "e.g. 175"}
              value={height}
              onChange={(e) => setHeight(e.target.value)}
              className="text-lg"
            />
          </div>

          <div className="flex gap-3">
 